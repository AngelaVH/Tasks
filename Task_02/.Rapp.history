0/0
2/0
Inf - Inf
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
my_vector
attribute(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
skip()
my_data <- data.frame(patient, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
View(my_data)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data, prefix = cnames)
colnames(my_data <- cnames)
colnames(mydata) <- cnames
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
"sam" == "fool"
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(FALSE || TRUE && 6 !=4 || 9 > 4)
ISTRUE(6 > 4)
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
Sys.Date()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
?sapply#
cls_list <- sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
skip()
flag_colors <- flags[, 11:17]
skip()
head(flag_colors)
lapply(flag_colors, sum)
skip()
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
skip()
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
skip()
unique_vals <- lapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
setwd('/Users/angelavanhorn/Desktop/Evolution/Tasks/Task_02')
Data1 <- read.csv('http://jonsmitchell.com/data/beren.csv',#
	stringsAsFactors=F)#
Data2 <- read.csv('http://jonsmitchell.com/data/cyrus.csv',#
	stringsAsFactors=F)
write.csv(Data1, 'rawdata.csv', quote=F)
length(Data1)
nrow(Data1)#
ncol(Data1)
colnames(Data1)
head(Data1)
Data[1,]
Data1 [1,]
Datal[2,]
Data1 [2,]
Data1 [1:3,]
Data1 [1:3, 4]
Data1 [1:5, 1:3]
Feeds <- which(Data1 [.9] = 'bottle')
Feeds <- which(Data1 [.9] == 'bottle')
berenMilk <- Data1 [Feeds,]
head(berenMilk)
Feeds <- which(Data1 [,'event'] =='bottle')
Feeds <- which(Data1$event =='bottle')
dateID <- sapply(dayID, as.Date, format = "%Y-%n-%d", orgin =#
	"2019-04-18")
dateID <- sapply(dayID , as.Date, format = "%Y-%n-%d", orgin =#
	"2019-04-18")
dateID <- sapply( dayID , as.Date, format = "%Y-%n-%d", orgin =#
	"2019-04-18")
dateID <- sapply('dayID' , as.Date, format = "%Y-%n-%d", orgin =#
	"2019-04-18")
Data1$age <- dataID - dataID[which(Data1$event == 'birth')]
Data1$age <- 'dataID' - dataID[which(Data1$event == 'birth')]
Data1$age <- 'dataID' - 'dataID'[which(Data1$event == 'birth')]
Data1$age <- "dataID" - "dataID"[which(Data1$event == "birth")]
Data1$age <- "dataID" -- "dataID"[which(Data1$event == "birth")]
Data1$age <- "dataID" - "dataID"[which(Data1$event == "birth")]
Data1$age <- 'dataID - dataID'[which(Data1$event == 'birth')]
head(Data1)
beren2 <- Data1
beren3 <- beren2[order(beren2$age),]
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
Feeds < which(beren3$event =="bottle")
setwd('/Users/angelavanhorn/Desktop/Evolution/Tasks/Task_02')#
Data1 <- read.csv('http://jonsmitchell.com/data/beren.csv',#
	stringsAsFactors=F)#
Data2 <- read.csv('http://jonsmitchell.com/data/cyrus.csv',#
	stringsAsFactors=F)#
write.csv(Data1, 'rawdata.csv', quote=F)#
length(Data1)#
nrow(Data1)#
ncol(Data1)#
colnames(Data1)#
head(Data1)#
Data1 [1,]#
Data1 [2,]#
Data1 [1:3,]#
Data1 [1:3, 4]#
Data1 [1:5, 1:3]#
Feeds <- which(Data1 [.9] == 'bottle')#
berenMilk <- Data1 [Feeds,]#
head(berenMilk)#
Feeds <- which(Data1 [,'event'] =='bottle')#
Feeds <- which(Data1$event =='bottle')#
dayID <- apply(Data1, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply('dayID' , as.Date, format = "%Y-%n-%d", orgin =#
	"2019-04-18")#
Data1$age <- 'dataID - dataID'[which(Data1$event == 'birth')]#
head(Data1)	#
beren2 <- Data1#
beren3 <- beren2[order(beren2$age),]#
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)#
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$[Feeds], var)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds, sum])
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
Feeds[1:6]
beren3$value[1:6]
beren3$age[1:6]
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)")
?par
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0)tck=-0.01)
par(1as=1, mar=c(5,5,1,1), mgp=c(2,0.5,0)tck=-0.01)
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type"b", pch=16, xlab="age in days", ylab="ounces of milk")
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab= "ounces of milk")
abline(h=mean(totalFeed), 1ty=2, col='red')
abline(h=mean(totalFeed), lty=2, col='red')
pdf(''r02b-totalMilkByDay.pdf'', height = 4, width = 4)
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5,5,1,1), mgp=(2,0.5,0), tck=-0.01)
par(1as=1, mar=c(5,5,1,1), mgp=(2,0.5,0), tck=-0.01)
par(las=1, mar=c(5,5,1,1), mgp=(2,0.5,0), tck=-0.01)
par(las=1, mar=c(5,5,1,1), mgp=(2, 0.5, 0), tck=-0.01)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
dev.off()
pdf(''r02b-totalMilkByDay.pdf'', height = 4, width=4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab=#
	"age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')#
dev.off()
pdf(''r02b-totalMilkByDay.pdf'', height=4, width=4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, #
xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')#
dev.off()
pdf('r02b-totalMilkByDay.pdf, height=4, width=4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, #
xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')#
dev.off()
pdf('r02b-totalMilkByDay.pdf, height=4, width=4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, #
xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')
xlab='age in days', ylab='ounces of milk')#
abline(h=mean(totalFeed), 1ty=2, col='red')
xlab="age in days", ylab="ounces of milk")
pdf('r02b-totalMilkByDay.pdf, height=4, width=4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, #
xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, #
("xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, #
"xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')
plot(as.numeric(names(totalFeed)),totalFeed,type="b", pch=16, #
"xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')
plot(as.numeric(names(totalFeed)),totalFeed,type="b", pch=16, xlab="age in days", ylab="ounces of milk")
plot(as.numeric(names(totalFeed)),totalFeed, type="b", pch=16, xlab="age in days",ylab="ounces of milk")
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days",ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col='red')
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days",ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col="re
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days",ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col="red")
pdf('r02b-totalMilkByDay.pdf, height=4, width=4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days",ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col="red")
dev.off()
pdf('r02b-totalMilkByDay.pdf, height=4, width=4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days",ylab="ounces of milk")#
abline(h=mean(totalFeed), 1ty=2, col="red")#
dev.off()
source("https://jonsmitchell.com/code/plotFxn02bR")
source("https://jonsmitchell.com/code/plotFxn02b.R")
source("https://jonsmitchell.com/code/plotFxn02b.R")#
Mass <-which(Data1[,9]=='trait_mass')
source("https://jonsmitchell.com/code/plotFxn02b.R")#
Mass <- which(Data1[,9]=='trait_mass')
source("https://jonsmitchell.com/code/plotFxn02b.R")
source("https://jonsmitchell.com/code/plotFxn02b.R")#
Mass <- which(Data1[,9]=='trait_mass')#
berenMass <- Data1[Mass,]
source("https://jonsmitchell.com/code/plotFxn02b.R")#
Mass <- which(Data1[,9]=='trait_mass')#
berenMass <- Data1[Mass,]#
head(berenMass)
source('https://jonsmitchell.com/code/plotFxn02b.R')#
Mass <- which(Data1[,9]=='trait_mass')#
berenMass <- Data1[Mass,]#
head(berenMass)
source('https://jonsmitchell.com/code/plotFxn02b.R')
source('https://jonsmitchell.com/code/plotFxn02b.R')#
Mass <- which(Data1[,9]=='trait_mass')#
berenMass <- Data1[Mass,]#
head(berenMass)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandpa <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandpa <- makeFounder("grandma_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
MatGrandpa <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandpa <- makeFounder("grandma_da")#
Alan <- makeBaby(PatGrandma, PatGrandpa)
MatGrandpa <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(PatGrandma, PatGrandpa)#
Focus <- makeBaby(Brenda, Alan)
ToMom <-length(grep("grandma_mom", Focus))//length(Focus)#
toMomMom <- length(grep("grandma_mom",Focus))/length(Focus)#
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ToMom <-length(grep("mom", Focus))//length(Focus)#
toMomMom <- length(grep("grandma_mom",Focus))/length(Focus)#
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ToMom <- length(grep("mom", Focus))//length(Focus)#
toMomMom <- length(grep("grandma_mom",Focus))/length(Focus)#
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ToMom <- length(grep("mom", Focus))/length(Focus)#
toMomMom <- length(grep("grandma_mom",Focus))/length(Focus)#
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
Sibling_01 <- makeBaby(Brenda, Alan)#
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)#
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))#
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="proportion shared genes")
sum(ToMomMom, ToMomDad)
pdf("003_relatePlot.pdf", height = 4, width = 4)
dev.off()
pdf("r02b0totMassByDay.pdf", height=4, width=4)
par(las=1, mar=c(5,5,1,1),mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalMass)),type="b",pch=16, xlab="age in day",ylab="mass in kg")
plot(as.numeric(names(totalMass)), totalMass, type="b",pch=16, xlab="age in day",ylab="mass in kg")
plot(as.numeric(names(totalMass)), totalMass, type="b",pch=16, xlab="age in days",ylab="mass in kg")
plot(as.numeric(names(totalMass)), totalMass, type="b",pch=16, xlab="age in day",#
ylab="mass in kg")
title("Beren Age vs Mass",xlab="age in day", ylab="mass in kg")
plot(as.numeric(names(totalMass)), totalMass, type="b,pch=16, xlab="age in day",#
ylab="mass in kg")#
title("Beren Age vs Mass",xlab="age in day", ylab="mass in kg")
plot(as.numeric(names(totalMass)), totalMass, type="b",pch=16, xlab="age in day",#
ylab="mass in kg")#
title("Beren Age vs Mass",xlab="age in day", ylab="mass in kg")
plot(as.numeric(names(totalMass)),totalMass,type="b",pch=16, xlab="age in day",#
ylab="mass in kg")#
title("Beren Age vs Mass",xlab="age in day", ylab="mass in kg")
plot(as.numeric(names(totalMass)),totalMass,type="b",pch=16, xlab="age in day",ylab="mass in kg")
